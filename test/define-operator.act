syntax { 'Bool = ['Enum ['True 'False]] }
syntax { 'Nat = ['EnumOrTag ['zero] [['succ 'Nat]]] }

operator
  { (x : A) - 'id : A
  ; (f : 'Wildcard) - ['myApp (t : 'Wildcard)] : 'Wildcard
  ; (a : A) - ['when (b : 'Bool)] : A
  ; (b : 'Bool) - ['if (t : 'Wildcard) (e : 'Wildcard)] : 'Wildcard
  ; (n : 'Nat) - ['plus (m : 'Nat)] : 'Nat
  ; (n : 'Nat) - ['mult (m : 'Nat)] : 'Nat
  -- TODO:
  -- ; (p : ['Sg a \x.b]) - 'fst : a
  -- ; (p : ['Sg a \x.b]) - 'snd : {x=p - 'fst} b
  }

t : B - 'id ~> t
(\x. t) : 'Wildcard - ['myApp s] ~> {x=s}t

x : A - ['when 'True] ~> x

'True : 'Bool - ['if l r] ~> l
'False : 'Bool - ['if l r] ~> r

'zero : 'Nat - ['plus n] ~> n
['succ m] : 'Nat - ['plus n] ~> ['succ (m - ['plus n])]
m : 'Nat - ['plus 'zero] ~> m
m : 'Nat - ['plus n] - ['plus x] ~> m - ['plus (n - ['plus x])]

-- parsed as m [(plus, [n]), (plus, [x])]

'zero : 'Nat - ['mult n] ~> 'zero
m : 'Nat - ['mult 'zero] ~> 'zero
-- TODO: this should raise a complaint that these are non-confluent
-- (unless we manage to get plus to be commutative)
['succ m] : 'Nat - ['mult n] ~> n - ['plus (m - ['mult n])]
m : 'Nat - ['mult ['succ n]] ~> m - ['plus (m - ['mult n])]
m : 'Nat - ['plus n] - ['mult p] ~> (m - ['mult p]) - ['plus (n - ['mult p])]

-- parsed as m [(plus, [n]), (mult, [p])]

exec
  'Bool?block.
  -- poor man's type annotations
  let t : 'Atom = 'test.
  let h : 'Wildcard = 'hello.
  ( PRINTF "%i" t - 'id.
  | t - 'id ~ t
  | h - ['when block] ~ h
  | block ~ 'True
  | PRINTF "%i" block.
  | 'Nat?m n p. m - ['plus n] - ['mult p] ~ (m - ['mult p]) - ['plus (n - ['mult p])]
  )
