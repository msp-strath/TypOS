syntax
  { -- untyped lambda terms
    'Term = ['Tag [ ['Lam ['Bind 'Term 'Term]]
                    ['App 'Term 'Term] ]]
  }

eval : ?'Term. !'Term.

env |- 'Term -> 'Term

eval@p = p?tm. if tm in env { v -> p!v. } else case tm
  { ['Lam \x. t] -> \x. env |- x -> x.
      eval@q. q!t. q?v. p!['Lam \x. v].
  ; ['App f s] -> 'Term?u.
      ( eval@q. q!s. q?v. u ~ v
      | eval@r. r!f. r?g. case g
        { ['Lam \y. t] -> eval@z. z!{y=u}t. z <-> p
        ; _ -> p!['App g u].
        }
      )
  }

exec eval@p. p!['App ['Lam \f. ['Lam \x. ['App f ['App f x]]]]
                     ['Lam \g. ['Lam \y. ['App g ['App g y]]]]].
             p?v. PRINTF "%i" v .

-- expected: \ x . (\ y . x (x (x (x y))))
