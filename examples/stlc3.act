trace { exec }

syntax
  { 'Check = ['Tag  [ ['Lam ['Bind 'Synth 'Check]]
                      ['Emb 'Synth]
             ]]
  ; 'Synth = ['Tag  [ ['Rad 'Check 'Type]
                      ['App 'Synth 'Check]
             ]]
  ; 'Type = ['EnumOrTag  [ 'Base 'Nat 'Bool ]
                         [['Arr 'Type 'Type]]
            ]
  }


check : ?'Type. ?'Check.
synth : ?'Synth. !'Type.
ctxt |- 'Synth -> 'Type

check@p = p?ty. p?tm. case tm
    { ['Lam \x. body] -> 'Type?S. 'Type?T.
         (ty ~ ['Arr S T]
         | \y. ctxt |- y -> S. check@q. q!T. q!{x=y}body.)
    ; ['Emb e] -> synth@q. q!e. q?S. S ~ ty
    }

synth@p = p?tm . if tm in ctxt { S -> p!S. } else case tm
   { ['Rad t ty] -> (check@q. q!ty. q!t. | p!ty.)
   ; ['App f s] -> 'Type?U. 'Type?V.
        ( synth@q. q!f. q?ty. ty ~ ['Arr U V]
        | check@r. r!U. r!s.
        | p!V.)
   }

exec check@p.
  'Type?X. 'Check?t.
  ((p! X. p! t.
    | X ~ ['Arr 'Nat 'Nat])
   | t ~ ['Lam \z. ['Emb z]])

