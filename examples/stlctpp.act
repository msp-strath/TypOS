trace { exec }

syntax
  { 'Check = ['EnumOrTag ['Nil]
                         [ ['Lam  ['Bind 'Synth 'Check]]
                           ['Cons 'Check 'Check]
                           ['Emb  'Synth]
             ]]
  ; 'Synth = ['Tag  [ ['Rad  'Check 'Type]
                      ['Fst  'Synth]
                      ['Snd  'Synth]
                      ['ListElim 'Type 'Synth 'Check
                                 ['Bind 'Synth ['Bind 'Synth ['Bind 'Synth 'Check]]]]
                      ['App 'Synth 'Check]
             ]]
  ; 'Type = ['EnumOrTag ['One]
                        [['Pair 'Type 'Type]
                        ['List 'Type]
                        ['Arr  'Type 'Type]
            ]]
  }

isType |- 'Type -> 'Nil
type  : ?'Type.
check : ?'Type. ?'Check.

ctxt |- 'Synth -> 'Type
synth : ?'Synth. !'Type.

type@p = p?ty. case (lookup isType ty)
  { ['Just S] ->
  ; 'Nothing  -> case ty
    { 'One        -> -- winning is silent
    ; ['Pair S T] -> type@q. q!S. | type@r. r!T.
    ; ['List S]   -> type@q. q!S.
    ; ['Arr S T]  -> type@q. q!S. | type@r. r!T.
--    ; otherwise   -> #"not a valid type"
    }
  }

check@p = p?ty. p?tm. case tm
    { ['Lam \x. body] ->
         'Type?S. 'Type?T. -- fresh metas for S(ource) and T(arget) of function type
         (ty ~ ['Arr S T]  -- ensure ty is (S -> T)
         | \y.                              -- bind the fresh variable y
               ctxt |- y -> S.              -- extend the context with fresh variable y : S
               check@q. q!T. q!{x=y}body.)  -- check the body with x=y
    ; 'Nil   -> case ty -- Nil is overloaded, type-directed disambiguation now
       { 'One      ->
       ; ['List S] ->
       ; otherwise -> #"wrong type for Nil"
       }
    ; ['Cons s t] -> case ty -- Cons is also overloaded
       { ['Pair S T] -> check@q. q!S. q!s. | check@r. r!T. r!t.
       ; ['List S]   -> check@q. q!S. q!s. | check@r. r!['List S]. r!t.
       ; otherwise   -> #"wrong type for Cons"
       }
    ; ['Emb e] -> -- change of direction
                  synth@q. q!e. -- infer the type
                  q?S. S ~ ty  -- receive the answer and check we agree
    }

synth@p = p?tm .
  -- lookup: in case tm is a free variable and a type has been pushed for it
  case (lookup ctxt tm)
    { ['Just S] -> p!S.
    ; 'Nothing -> case tm
      { ['Rad t ty] -> (type@r. r!ty. | check@q. q!ty. q!t. | p!ty.)
      ; ['Fst e]    -> 'Type?S. 'Type?T. (synth@q. q!e. q?ty. ty ~ ['Pair S T] | p!S.)
      ; ['Snd e]    -> 'Type?S. 'Type?T. (synth@q. q!e. q?ty. ty ~ ['Pair S T] | p!T.)
      ; ['ListElim ty e n (\x. \xs. \ih. c)] ->
           p!ty. | type@r. r!ty. | check@q. q!ty. q!n. |
           'Type?X. (synth@u. u!e. u?V. V ~ ['List X] |
                \y.  ctxt |- y  -> X.
                \ys. ctxt |- ys -> ['List X].
                \jh. ctxt |- jh -> ty.
                     check@v. v!ty. v!{x=y,xs=ys,ih=jh}c.
               )
      ; ['App f s]  -> 'Type?U. 'Type?V.
           ( synth@q. q!f. q?ty. ty ~ ['Arr U V]
           | check@r. r!U. r!s.
           | p!V.)
      }
   }
 
exec \A. isType |- A -> []. check@p.
        p!['Arr ['List A] ['Arr ['List A] ['List A]]].
        p!['Lam \as. ['Lam \bs.
                ['Emb ['ListElim ['List A] as
                      ['Emb bs]                                       -- [] ++ ys = ys
                      (\x. \xs. \ih. ['Cons ['Emb x] ['Emb ih]])]]]]. -- (x :: xs) ++ ys = x :: (xs ++ ys)
