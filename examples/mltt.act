syntax
  { 'Check = ['EnumOrTag ['Ty]
                         [ ['Lam ['Bind 'Synth 'Check]]
                           ['Pi  'Check ['Bind 'Synth 'Check]]
                           ['Emb 'Synth]
                         ]
             ]
  ; 'Synth = ['Tag [ ['Rad 'Check 'Check]
                     ['App 'Synth 'Check]
             ]]
  }

type  : $'Check. !'Check.

check : ?'Check. {- Type -} $'Check. {- Term -} !'Check. {-Normal form-}
synth : $'Synth. !'Check. {-Type-} !'Check. {-Normal form-}
ctxt |- 'Synth -> 'Check

------------------------------------------------------------------------------
-- Implementation

type@p = check@q. q!'Ty. q <-> p

check@p = p?ty. p?tm. case tm
  { 'Ty -> (ty ~ 'Ty | p!'Ty.)
  ; ['Pi S \x. T] ->
    (ty ~ 'Ty
    |type@q. q!S. q?NS. \x. ctxt |- x -> NS.
     type@r. r!T. r?NT. p!['Pi NS \x. NT].
    )
  ; ['Emb e] -> synth@q. q!e. q?nty. (nty ~ ty | q <-> p)
  ; ['Lam \x. body] -> case ty
    { ['Pi S \x. T] -> \x. ctxt |- x -> S.
                       check@q. q!T. q!body. q?vbody.
                       p!['Lam \x. vbody].
    ; _ -> #"Expected Pi; got %i" ty
    }
  }

synth@p = p?tm . case (lookup ctxt tm)
  { ['Just S] -> p!S. p!['Emb tm].
  ; 'Nothing -> case tm
    { ['Rad t ty] -> type@q. q!ty. q?nty. p!nty.
                     check@r. r!nty. r!t. r <-> p
    ; ['App f s] -> synth@q. q!f. q?ty. q?nf. case ty
      { ['Pi S \v. T] -> check@r. r!S. r!s. r?ns.
                         type@u. u!{v=['Rad ns S]}T. u?NT. p!NT.
                         case nf
        { ['Lam \x. body] -> check@w. w!NT. w!{x=['Rad ns S]}body. w <-> p
        ; ['Emb e] -> p!['Emb ['App e ns]].
        ; _ -> #"Expected Lam or Emb; got %i" nf
        }
      ; _ -> #"Expected Pi; got %i" ty 
      }
    }
  }

exec  synth@p. p!['Rad
                  ['Lam \x. ['Emb x]]
                  ['Emb
                   ['App ['Rad
                          ['Lam \x. ['Pi ['Emb x] \a. ['Emb x]]]
                          ['Pi 'Ty \x. 'Ty]]
                         ['Pi 'Ty \x. ['Emb x]]]]].
      p?nty. p?ntm.
      PRINTF "%i" nty.
      PRINTF "%i" ntm.

{-
exec  type@p. p!['Emb
                 ['App ['Rad
                        ['Lam \x. ['Pi ['Emb x] \a. ['Emb x]]]
                        ['Pi 'Ty \x. 'Ty]]
                       ['Pi 'Ty \x. ['Emb x]]]]. p?ty. 
      PRINTF "%i" ty.
-}
