
syntax
  { 'Check = ['EnumOrTag ['Ty 'One 'Tt 'Fst 'Snd]
                         [ ['Lam ['Bind 'Synth 'Check]]
                           ['Pair 'Check 'Check]
                           ['Pi  'Check ['Bind 'Synth 'Check]]
                           ['Sg  'Check ['Bind 'Synth 'Check]]
                           ['Emb 'Synth]
                         ]
             ]
  ; 'Synth = ['Tag [ ['Rad 'Check 'Check]
                     ['App 'Synth 'Check]
             ]]
  }

type  : ?'Check.

check : ?'Check. {- Type -} ?'Check. {- Term -}
^checkWorker : ?'Check. {- Type -} ?'Check. {- Term -}
synth : ?'Synth. !'Check. {-Type-}
^synthWorker : 'Synth -> 'Check {-Type-} |- ?'Synth. !'Check. {-Type-}

^checkEval : ?'Check. !'Check.
^evalSynth : ?'Synth. !'Synth.

^checkEqual : ?'Check{-Type-}. ?'Check. ?'Check.
^checkEqualWorker : ?'Check{-Type-}. ?'Check. ?'Check.
^equalSynth : ?'Synth.?'Synth.!'Check{-Type-}.
^equalSynthWorker : 'Synth -> 'Check {-Type-} |- ?'Synth.?'Synth.!'Check{-Type-}.

------------------------------------------------------------------------------
-- Implementation

type@p = p?ty. ^check@q. q!'Ty. q!ty.

check@p = p?ty. checkEval@q. q!ty. q?nty. checkWorker@r. r!nty. p <-> r
synth@p = p?tm. synthWorker@r. r!tm. r?ty.checkEval@q. q!ty. q <-> p

checkEqual@p = p?ty. p?tm1. p?tm2. checkEval@qty. qty!ty. checkEval@q. q!tm1. checkEval@r. r!tm2. qty?nty. q?ntm1. r?ntm2. checkEqualWorker@w. w!nty. w!ntm1. w!ntm2.
equalSynth@p = p?tm1. p?tm2. evalSynth@q. q!tm1. evalSynth@r. r!tm2. q?ntm1. r?ntm2. equalSynthWorker@u. u!ntm1. u!ntm2.u?ty.checkEval@v. v!ty. v <-> p

-- type assumed to be head normal
checkWorker@p = p?ty. p?tm. case tm
  { 'Ty -> ty ~ 'Ty
  ; 'One -> ty ~ 'Ty
  ; ['Pi S \x. T] ->
    (ty ~ 'Ty
    |type@q. q!S.
    | \x. synthWorker {x -> S}. equalSynthWorker {x -> S}. type@r. r!T.
    )
  ; ['Sg S \x. T] ->
    (ty ~ 'Ty
    |type@q. q!S.
    | \x. synthWorker {x -> S}. equalSynthWorker {x -> S}. type@r. r!T.
    )
  ; ['Pair s t] -> case ty
    { ['Sg S \x. T] -> (check@q. q!S. q!s. | check@r. r!{x=['Rad s S]}T. r!t.)
    ; _ -> #"Expected Sg; got %i" ty
    }
  ; 'Tt -> ty ~ 'One
  ; ['Lam \x. body] -> case ty
    { ['Pi S \x. T] -> \x. synthWorker {x -> S}. equalSynthWorker {x -> S}.
                       check@q. q!T. q!body.
    ; _ -> #"Expected Pi; got %i" ty
    }
  ; ['Emb e] -> synth@q. q!e. q?ety. checkEqual@r. r!'Ty. r!ty. r!ety.
  }

synthWorker@p = p?tm . lookup tm { S -> p!S. } else case tm
   { ['Rad t ty] -> ( type@q. q!ty.
                    | check@r. r!ty. r!t.
                    | p!ty.)
   ; ['App f s] -> synth@q. q!f. q?ty. case ty
     { ['Pi S \v. T] -> ( check@r. r!S. r!s.
                        | p!{v=['Rad s S]}T.)
     ; ['Sg S \v. T] -> case s
       { 'Fst -> p!S.
       ; 'Snd -> p!{v=['App f 'Fst]}T.
       ; _ -> #"Expected Fst or Snd; got %i" s
       }
     ; _ -> #"Expected Pi or Sg; got %i" ty
     }
   }

checkEval@p = p?tm. case tm
  { ['Emb e] -> {-PRINTF "Emb" .-} evalSynth@q. q!e. q?ne. case ne
    { ['Rad t ty] -> !. PRINTF "Ups". p!t.
    ; x -> p!['Emb x].
    }
  ; x -> PRINTF "Other %i" x . p!x.
  }

-- types in radicals are head normal
evalSynth@p = p?tm. case tm
  { ['Rad t ty] -> {-PRINTF "Rad" .-} checkEval@q. q!t. checkEval@r. r!ty. q?nt. r?nty. p!['Rad nt nty].
  ; ['App f s] -> {-PRINTF "App" .-} evalSynth@q. q!f. q?nf. case nf
    { ['Rad ['Lam \ x. t] ['Pi S \ x. T]] -> !. PRINTF "Beta" . evalSynth@w. w!{x=['Rad s S]}['Rad t T]. w <-> p
    ; ['Rad ['Pair a b] ['Sg S \ x. T]] -> !. case s
      { 'Fst -> PRINTF "Fst" . evalSynth@w. w!['Rad a S]. w <-> p
      ; 'Snd -> PRINTF "Snd" . evalSynth@w. w!['Rad b {x=['Rad a S]}T]. w <-> p
      ; _ -> #"Expected Fst or Snd; got %i" s
      }
    ; g -> p!['App g s].
    }
  ; x -> p!x.
  }

checkEqualWorker@p = p?ty. p?tm1. p?tm2. PRINTF "checkEqual %i\n %i\n %i" ty tm1 tm2. case ty
  { ['Pi S \x. T] -> PRINTF "Eta Pi" . \x. equalSynthWorker {x -> S}. checkEqual@q. q!T. q!['Emb ['App ['Rad tm1 ty] ['Emb x]]]. q!['Emb ['App ['Rad tm2 ty] ['Emb x]]].
  ; ['Sg S \x. T] -> PRINTF "Eta Sg" . (checkEqual@q. q!S. q!['Emb ['App ['Rad tm1 ty] 'Fst]]. q!['Emb ['App ['Rad tm2 ty] 'Fst]].
                                       |checkEqual@q. q!{x=['App ['Rad tm1 ty] 'Fst]}T. q!['Emb ['App ['Rad tm1 ty] 'Snd]]. q!['Emb ['App ['Rad tm2 ty] 'Snd]].)
  ; 'One ->
  ; _ -> checkEval@q. q!tm1. checkEval@r. r!tm2. q?ntm1. r?ntm2. case [ntm1|ntm2]
    { ['Ty|'Ty] -> PRINTF "Ty" .
    ; [['Pi S1 \x. T1] | ['Pi S2 \x. T2]] -> PRINTF "Pi" . (checkEqual@w. w!'Ty. w!S1. w!S2. | \ x. equalSynthWorker {x -> S1}. checkEqual@u. u!'Ty. u!T1. u!T2.)
    ; [['Sg S1 \x. T1] | ['Sg S2 \x. T2]] -> PRINTF "Sg" . (checkEqual@w. w!'Ty. w!S1. w!S2. | \ x. equalSynthWorker {x -> S1}. checkEqual@u. u!'Ty. u!T1. u!T2.)
    ; ['One|'One] -> PRINTF "One" .
    ; [['Emb e1] | ['Emb e2] ] -> PRINTF "Emb" .equalSynth@w. w!e1.w!e2.w?ety.
    ; [x|y] -> # "%i not checkEqual to %i" x y
    }
  }

equalSynthWorker@p = p?e1. p?e2. PRINTF "equalSynth\n %i\n %i" e1 e2. lookup e1 { S1 -> PRINTF "Var" . (e1 ~ e2 | p!S1.)} else case [e1|e2]
  { [['Rad ['Emb e1'] ty1] | _ ] -> PRINTF "Rad-L" . equalSynth@q. q!e1'. q!e2. p <-> q
  ; [_  | ['Rad ['Emb e2'] ty2]] -> PRINTF "Rad-R" . equalSynth@q. q!e1. q!e2'. p <-> q
  ; [['Rad t1 ty1] | ['Rad t2 ty2]] -> PRINTF "Rad-Rad" . (checkEqual@q. q!'Ty. q!ty1. q!ty2. | checkEqual@r. r!ty1. r!t1. r!t2.|p!ty1.)
  ; [['App f1 s1] | ['App f2 s2] ] -> PRINTF "App" . equalSynth@q. q!f1. q!f2. q?ty. case ty
    { ['Pi S \ x. T] -> (checkEqual@r. r!S. r!s1. r!s2.|p!{x=['Rad s1 S]}T.)
    ; ['Sg S \ x. T] -> s1 ~ s2 | case s1
      { 'Fst -> p!S.
      ; 'Snd -> p!{x=['App f1 'Fst]}T.
      ; _ -> #"Expected Fst or Snd; got %i" s1
      }
    }
  ; [x|y] -> # "%i not equalSynth to %i" x y
  }

exec  'Synth?Id.'Synth?refl.'Synth?swap.'Synth?swapswap.
         (Id ~ ['Rad ['Lam \T. ['Lam \x. ['Lam \y.
                       ['Pi ['Pi ['Emb T] \ t. 'Ty] \P.
                       ['Pi ['Emb ['App P ['Emb x]]] \px. ['Emb ['App P ['Emb y]]]]]]]]
                     ['Pi 'Ty \T. ['Pi ['Emb T] \x. ['Pi ['Emb T] \y. 'Ty]]]]
         |refl ~ ['Rad ['Lam \T. ['Lam \x. ['Lam \P. ['Lam \px. ['Emb px]]]]]
                       ['Pi 'Ty \T. ['Pi ['Emb T] \x. ['Emb ['App ['App ['App Id ['Emb T]] ['Emb x]] ['Emb x]]]]]]
         |swap ~ ['Rad
                  ['Lam \A. ['Lam \B. ['Lam \x . ['Pair ['Emb ['App x 'Snd]] ['Emb ['App x 'Fst]]]]]]
                  ['Pi 'Ty \A. ['Pi 'Ty \B. ['Pi ['Sg ['Emb A] \x. ['Emb B] ] \ab. ['Sg ['Emb B] \x. ['Emb A] ]]]]]
         |swapswap ~ ['Rad
                      ['Lam \A. ['Lam \B. ['Lam \x . ['Emb ['App ['App ['App swap ['Emb B]] ['Emb A]] ['Emb ['App ['App ['App swap ['Emb A]] ['Emb B]] ['Emb x]]]]]]]]
                      ['Pi 'Ty \A. ['Pi 'Ty \B. ['Pi ['Sg ['Emb A] \x. ['Emb B] ] \ab. ['Sg ['Emb A] \x. ['Emb B] ]]]]]
         |
         synth@p. p!Id. p?ity. PRINTF "Id : %i" ity.
         synth@q. q!refl. q?rty. PRINTF "refl : %i" rty.
         synth@r. r!swap. r?sty. PRINTF "swap : %i" sty.
         synth@r2. r2!swapswap. r2?sty2. PRINTF "swapswap : %i" sty2.
         synth@e1. e1!['Rad ['Emb ['App ['App refl ['Pi ['Sg 'Ty \x. 'Ty ] \ab. ['Sg 'Ty \x. 'Ty]]] ['Lam \x . ['Emb x]]]]
                            ['Emb ['App ['App ['App Id ['Pi ['Sg 'Ty \x. 'Ty ] \ab. ['Sg 'Ty \x. 'Ty]]]
                                                       ['Lam \x . ['Emb x]]]
                                                       ['Emb ['App ['App swapswap 'Ty] 'Ty]]]]]. e1?ety1. PRINTF "refl swapswap : %i" ety1.
         synth@e2. e2!['Rad ['Emb ['App ['App refl ['Pi ['Sg 'One \x. 'One ] \ab. ['Sg 'One \x. 'One]]] ['Lam \x . ['Emb x]]]]
                            ['Emb ['App ['App ['App Id ['Pi ['Sg 'One \x. 'One ] \ab. ['Sg 'One \x. 'One]]]
                                                       ['Lam \x . ['Emb x]]]
                                                       ['Emb ['App ['App swap 'One] 'One]]]]]. e2?ety2. PRINTF "refl swap One : %i" ety2.
      )
