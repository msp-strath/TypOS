trace { exec }

syntax
  { 'Check = ['Tag  [ ['Lam ['Bind 'Synth 'Check]]
                      ['Emb 'Synth]
             ]]
  ; 'Synth = ['Tag  [ ['Rad 'Check 'Type]
                      ['App 'Synth 'Check]
             ]]
  ; 'Type = ['EnumOrTag  [ 'Base 'Nat 'Bool]
                         [['Arr  'Type 'Type]
            ]]
  }
check : ?'Type. ?'Check.
synth : 'Synth -> 'Type |- ?'Synth. !'Type.

check@p = p?ty. p?tm. case tm
    { ['Lam \x. body] -> 'Type?S. 'Type?T.
         (ty ~ ['Arr S T]
         | \x. synth { x -> S }. check@q. q!T. q!body.)
    ; ['Emb e] -> synth@q. q!e. q?S. S ~ ty
    }
synth@p = p?tm . lookup tm { S -> p!S. } else case tm
   { ['Rad t ty] -> (check@q. q!ty. q!t. | p!ty.)
   ; ['App f s] -> 'Type?U. 'Type?V.
        ( synth@q. q!f. q?ty. ty ~ ['Arr U V]
        | check@r. r!U. r!s.
        | p!V.)
   }

exec  check@p. p! ['Arr 'Nat 'Nat].
              p! ['Lam \z. ['Emb ['App ['Rad ['Lam \w. ['Emb w]] ['Arr 'Nat 'Nat]] ['Emb z]]]].
      PRINTF "Store: %m\nEnv: %e\nStack:%S".
