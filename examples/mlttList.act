
syntax
  { 'Check = ['EnumOrTag ['Ty 'One 'Tt 'Fst 'Snd 'Null]
                         [ ['Lam ['Bind 'Synth 'Check]]
                           ['Pair 'Check 'Check]
                           ['Pi  'Check ['Bind 'Synth 'Check]]
                           ['Sg  'Check ['Bind 'Synth 'Check]]
                           ['List 'Check]
			   ['Sing 'Check]
			   ['Plus 'Check 'Check]
			   ['Emb 'Synth 'Adapt]
			   ['ListRec ['Bind 'Synth 'Check] 'Check ['Bind 'Synth ['Bind 'Synth ['Bind 'Synth 'Check]]]]
                         ]
             ]
  ; 'Adapt = ['EnumOrTag ['Id]
    	     		 [ ['Then 'Adapt 'Check 'Adapt]
			   ['List 'Check]
			 ]
	     ]
  ; 'Synth = ['Tag [ ['Rad 'Check 'Check]
                     ['App 'Synth 'Check]
             ]]
  }

type  : ?'Check.

check : ?'Check{- Type -}. ?'Check{- Term -}.
^checkWorker : ?'Check{- Type -}. ?'Check{- Term -}.
synth : ?'Synth. !'Check{-Type-}.
^synthWorker : 'Synth -> 'Check {-Type-} |- ?'Synth. !'Check{-Type-}.
adapt : ?'Check{- source Type -}. ?'Adapt. ?'Check{- target Type -}.

^checkEval : ?'Check{-target Type-}. ?'Check. !'Check.
^evalSynth : ?'Synth. !'Synth.
^adaptVal : ?'Check{- source value -}. ?'Check{- source type -}. ?'Adapt. ?'Check{- target type -}. !'Check{- target value -}.
^adaptValWorker : ?'Check{- source value -}. ?'Check{- source type -}. ?'Adapt. ?'Check{- target type -}. !'Check{- target value -}.

checkEqual : ?'Check{-Type-}. ?'Check. ?'Check.
^checkEqualWorker : ?'Check{-Type-}. ?'Check. ?'Check.
^equalSynth : ?'Synth.?'Synth.!'Check{-Type-}.
^equalSynthWorker : 'Synth -> 'Check {-Type-} |- ?'Synth.?'Synth.!'Check{-Type-}.
^adaptEqual : ?'Check{- source type -}. ?'Check{- target type -}. ?'Adapt. ?'Adapt.

------------------------------------------------------------------------------
-- Implementation

type@p = p?ty. ^check@q. q!'Ty. q!ty.

check@p = p?ty. checkEval@q. q!'Ty. q!ty. q?nty. checkWorker@r. r!nty. p <-> r
synth@p = p?tm. synthWorker@r. r!tm. r?ty.checkEval@q. q!'Ty. q!ty. q <-> p

adapt@p = p?sty. p?a. p?tty. case a
  { 'Id -> checkEqual@q. q!'Ty. q!sty. q!tty.
  ; ['List f] -> 'Check?S. 'Check?T.
    ( sty ~ ['List S]
    | tty ~ ['List T]
    | check@r. r!['Pi S \_. T]. r!f.)
  ; ['Then a1 mty a2] -> type@q. q!mty. checkEval@r. r!'Ty. r!mty. r?nmty.
    ( adapt@u. u!sty. u!a1. u!nmty.
    | adapt@w. w!nmty. w!a2. w!tty.
    )
  }

checkEqual@p = p?ty. p?tm1. p?tm2. 
	     checkEval@qty. qty!'Ty. qty!ty. qty?nty. 
	     checkEval@q. q!nty. q!tm1. checkEval@r. r!nty. r!tm2. 
	     q?ntm1.                    r?ntm2. 
	     checkEqualWorker@w. w!nty. w!ntm1. w!ntm2.
equalSynth@p = p?tm1. p?tm2. evalSynth@q. q!tm1. evalSynth@r. r!tm2. q?ntm1. r?ntm2. equalSynthWorker@u. u!ntm1. u!ntm2.u?ty.checkEval@v. v!'Ty. v!ty. v <-> p

-- type assumed to be head normal
checkWorker@p = p?ty. p?tm. case tm
  { 'Ty -> ty ~ 'Ty
  ; 'One -> ty ~ 'Ty
  ; ['Pi S \x. T] ->
    (ty ~ 'Ty
    |type@q. q!S.
    | \x. synthWorker {x -> S}. equalSynthWorker {x -> S}. type@r. r!T.
    )
  ; ['Sg S \x. T] ->
    (ty ~ 'Ty
    |type@q. q!S.
    | \x. synthWorker {x -> S}. equalSynthWorker {x -> S}. type@r. r!T.
    )
  ; ['List T] -> 
    (ty ~ 'Ty
    | type@q. q!T.)
  ; ['Pair s t] -> case ty
    { ['Sg S \x. T] -> (check@q. q!S. q!s. | check@r. r!{x=['Rad s S]}T. r!t.)
    ; _ -> #"Expected Sg; got %i" ty
    }
  ; 'Tt -> ty ~ 'One
  ; ['Lam \x. body] -> case ty
    { ['Pi S \x. T] -> \x. synthWorker {x -> S}. equalSynthWorker {x -> S}.
                       check@q. q!T. q!body.
    ; _ -> #"Expected Pi; got %i" ty
    }
  ; ['Emb e a] -> synth@q. q!e. q?ety. adapt@r. r!ety. r!a. r!ty.
  ; _ -> case ty
    { ['List T] -> case tm
      { 'Null ->
      ; ['Sing t] -> check@q. q!T. q!t.
      ; ['Plus s t] -> 
        ( check@q. q!ty. q!s.
        | check@r. r!ty. r!t.)
      }
    }
  }

synthWorker@p = p?tm . lookup tm { S -> p!S. } else case tm
   { ['Rad t ty] -> ( type@q. q!ty.
                    | check@r. r!ty. r!t.
                    | p!ty.)
   ; ['App f s] -> synth@q. q!f. q?ty. case ty
     { ['Pi S \v. T] -> ( check@r. r!S. r!s.
                        | p!{v=['Rad s S]}T.)
     ; ['Sg S \v. T] -> case s
       { 'Fst -> p!S.
       ; 'Snd -> p!{v=['App f 'Fst]}T.
       ; _ -> #"Expected Fst or Snd; got %i" s
       }
     ; ['List S] -> case s
       { ['ListRec (\xs. T) n (\y.\ys.\ih. c)] ->
         ( \xs. synthWorker{xs -> ty}. type@v. v!T.
	 | check@r. r!{xs = ['Rad 'Null ty]}T. r!n.
	 | \y. synthWorker{y -> S}. \ys. synthWorker{ys -> ty}. \ih. synthWorker{ih -> {xs = ys}T}.
	    check@u. u!{xs = ['Rad ['Plus ['Sing ['Emb y 'Id]] ['Emb ys 'Id]] ty]}T. u!c. 
	 | p!{xs = f}T. )
       }
     ; _ -> #"Expected Pi, Sg or List; got %i" ty
     }
   }

-- never returns a left-nested 'Plus
checkEval@p = p?tty. p?tm. case tm
  { ['Plus s t] -> checkEval@q. q!tty. q!s. q?ns. case ns
    { 'Null -> checkEval@r. r!tty. r!t. p <-> r
    ; ['Plus x xs] -> p!['Plus x ['Plus xs t]].
    ; _ -> checkEval@r. r!tty. r!t. r?nt. case nt
      { 'Null -> p!ns.
      ;  _ -> p!['Plus ns nt].
      }
    }
  ; ['Emb e a] -> {-PRINTF "Emb" .-} evalSynth@q. q!e. q?ne. case ne
    { ['Rad t sty] -> !. adaptVal@r. r!t. r!sty. r!a. r!tty. r <-> p
    ; x -> p!['Emb x a].
    }
  ; x -> {- PRINTF "Other %i" x . -} p!x.
  }

-- whenever evalSynth returns a radical, the term and the type are head normal
evalSynth@p = p?tm. case tm
  { ['Rad t ty] -> {-PRINTF "Rad" .-} checkEval@r. r!'Ty. r!ty. r?nty. checkEval@q. q!nty. q!t. q?nt. p!['Rad nt nty].
  ; ['App f s] -> {-PRINTF "App" .-} evalSynth@q. q!f. q?nf. case nf
    { ['Rad ['Lam \ x. t] ['Pi S \ x. T]] -> !. PRINTF "Beta" . evalSynth@w. w!{x=['Rad s S]}['Rad t T]. w <-> p
    ; ['Rad ['Pair a b] ['Sg S \ x. T]] -> !. case s
      { 'Fst -> PRINTF "Fst" . evalSynth@w. w!['Rad a S]. w <-> p
      ; 'Snd -> PRINTF "Snd" . evalSynth@w. w!['Rad b {x=['Rad a S]}T]. w <-> p
      ; _ -> #"Expected Fst or Snd; got %i" s
      }
    ; ['Rad t ['List S]] -> case s
      { ['ListRec (\xs. T) n (\y.\ys.\ih. c)] -> case t
        { 'Null -> evalSynth@w. w!['Rad n {xs = nf}T]. w <-> p
	; ['Sing z] -> evalSynth@w.
	               w!['Rad {y = ['Rad z S],ys = ['Rad 'Null ['List S]], ih = ['Rad n {xs = ['Rad 'Null ['List S]]}T]}c {xs = nf}T].
		       w <-> p
	; ['Plus as bs] -> evalSynth@w.
	  	    	   w!['App ['Rad as ['List S]]
			        ['ListRec (\zs . {xs = ['Rad ['Plus ['Emb zs 'Id] bs] ['List S]]}T)
				          ['Emb ['App ['Rad bs ['List S]] s] 'Id]
					  (\z . \zs. \jh. {y = z, ys = ['Rad ['Plus ['Emb zs 'Id] bs] ['List S]], ih = jh}c)]].
	                   w <-> p
	; ['Emb e a]  -> synth@r. r!e. r?sty. case sty
	  { ['List R] -> \ x. synthWorker {x -> R}. equalSynthWorker {x -> R}. adaptVal@av. av!['Sing ['Emb x 'Id]]. av!sty. av!a. av!['List S]. av?v. case v
	    { ['Sing fx] -> p!['App e ['ListRec (\zs. {xs = ['Rad ['Emb zs a] ['List S]]}T) 
	      	     	    		  	    n 
						    (\z. \zs. \jh. { y  = ['Rad ({x=z}fx) S]
						    	      	   , ys = ['Rad ['Emb zs a] ['List S]] 
								   , ih = jh}c)]].
	    ; _ -> # "Expected Sing; got %i" v
	    }
	  ; _ -> # "Expected List; got %i" sty
	  }
	}
      }
    ; ['Rad ['Emb e a] ty] -> p!['App e s]. -- a is 'Id because ty is not a list type
    ; g -> p!['App g s].
    }
  ; x -> p!x.
  }

adaptVal@p = p?stm. p?sty. p?a. p?tty.
	   checkEval@q. q!'Ty. q!sty. q?nsty.
	   checkEval@r. r!'Ty. r!tty. r?ntty.
	   adaptValWorker@s. s!stm. s!nsty. s!a. s!ntty. s <-> p

adaptValWorker@p = p?stm. p?sty. p?a. p?tty. case [sty a tty]
  { [_ 'Id _] -> p!stm. PRINTF "Ups".
  ; [_ ['Then a1 mty a2] _] -> checkEval@s. s!'Ty. s!mty. s?nmty. adaptValWorker@q. q!stm. q!sty. q!a1. q!nmty. q?mtm. adaptValWorker@r. r!mtm. r!nmty. r!a2. r!tty. p <-> r   
  ; [['List S] ['List f] ['List T]] -> case stm
    { 'Null -> p!'Null.
    ; ['Plus xs ys] -> adaptValWorker@q. q!xs. q!sty. q!a. q!tty. q?xs'.p!['Plus xs' ['Emb ['Rad ys sty] a]].
    ; ['Sing s] -> checkEval@q. q!T. q!['Emb ['App ['Rad f ['Pi S \_. T]] s] 'Id]. q?t. p!['Sing t].
    ; ['Emb xs a'] -> case a'
      { 'Id -> p!['Emb xs a]. 
      ; _ -> p!['Emb xs ['Then a' sty a]].
      }
    }
  ; _ -> # "Unexpected adaptor %i" a
  }

checkEqualWorker@p = p?ty. p?tm1. p?tm2. {- PRINTF "checkEqual %i\n %i\n %i" ty tm1 tm2. -} case ty
  { ['Pi S \x. T] -> PRINTF "Eta Pi" . \x. equalSynthWorker {x -> S}. checkEqual@q. q!T. q!['Emb ['App ['Rad tm1 ty] ['Emb x 'Id]] 'Id]. q!['Emb ['App ['Rad tm2 ty] ['Emb x 'Id]] 'Id].
  ; ['Sg S \x. T] -> PRINTF "Eta Sg" . (checkEqual@q. q!S. q!['Emb ['App ['Rad tm1 ty] 'Fst] 'Id]. q!['Emb ['App ['Rad tm2 ty] 'Fst] 'Id].
                                       |checkEqual@q. q!{x=['App ['Rad tm1 ty] 'Fst]}T. q!['Emb ['App ['Rad tm1 ty] 'Snd] 'Id]. q!['Emb ['App ['Rad tm2 ty] 'Snd] 'Id].)
  ; 'One ->
  ; _ -> case [tm1|tm2]
    { ['Ty|'Ty] -> {- PRINTF "Ty" . -}
    ; [['Pi S1 \x. T1] | ['Pi S2 \x. T2]] -> {- PRINTF "Pi" . -} (checkEqual@w. w!'Ty. w!S1. w!S2. | \ x. equalSynthWorker {x -> S1}. checkEqual@u. u!'Ty. u!T1. u!T2.)
    ; [['Sg S1 \x. T1] | ['Sg S2 \x. T2]] -> {- PRINTF "Sg" . -} (checkEqual@w. w!'Ty. w!S1. w!S2. | \ x. equalSynthWorker {x -> S1}. checkEqual@u. u!'Ty. u!T1. u!T2.)
    ; ['One|'One] -> {- PRINTF "One" . -}
    ; [['List S1] | ['List S2]] -> checkEqual@w. w!'Ty. w!S1. w!S2.
    ; ['Null|'Null] ->
    ; [['Sing t1]|['Sing t2]] -> case ty
        { ['List T] -> checkEqual@q. q!T. q!t1. q!t2.
        ; _ -> # "Expected a list type, got %i" ty
        }
    ; [['Plus s1 t1]|['Plus s2 t2]] -> ( checkEqual@q. q!ty. q!s1. q!s2.
                                       | checkEqual@r. r!ty. r!t1. r!t2.)
    ; [['Emb e1 a1] | ['Emb e2 a2] ] -> {- PRINTF "Emb" . -} equalSynth@w. w!e1.w!e2.w?ety. adaptEqual@ae. ae!ety. ae!ty. ae!a1. ae!a2.
    ; [x|y] -> # "%i not checkEqual to %i" x y
    }
  }

equalSynthWorker@p = p?e1. p?e2. PRINTF "equalSynth\n %i\n %i" e1 e2.
  lookup e1 { S1 -> {- PRINTF "Var" . -} lookup e2 {S2 -> (e1 ~ e2 | p!S1.)}
  	    else case e2
  	    { ['Rad ['Emb e2' a2] ty2] -> (e1 ~ e2' | p!S1. | adaptEqual@q. q!S1. q!S1. q!a2. q!'Id.)
	    ; _ -> #"Expected an adapter, behaviourally equal to 'Id" 
	    }}
  else lookup e2 { S2 -> case e1
  { ['Rad ['Emb e1' a1] ty1] -> (e1' ~ e2 | p!S2. | adaptEqual@q. q!S2. q!S2. q!a1. q!'Id.)
	    ; _ -> #"Expected an adapter, behaviourally equal to 'Id" 
  }}
  else case [e1|e2]
  {- FIXME : Rad-L and Rad-R are (too) syntactic" -}
  { [['Rad ['Emb e1' 'Id] ty1] | _ ] -> {- PRINTF "Rad-L" . -} equalSynth@q. q!e1'. q!e2. p <-> q
  ; [_  | ['Rad ['Emb e2' 'Id] ty2]] -> {- PRINTF "Rad-R" . -} equalSynth@q. q!e1. q!e2'. p <-> q
  ; [['Rad t1 ty1] | ['Rad t2 ty2]] -> {- PRINTF "Rad-Rad" . -} (checkEqual@q. q!'Ty. q!ty1. q!ty2. | checkEqual@r. r!ty1. r!t1. r!t2.|p!ty1.)
  ; [['App f1 s1] | ['App f2 s2] ] -> {- PRINTF "App" . -} equalSynth@q. q!f1. q!f2. q?ty. case ty
    { ['Pi S \ x. T] -> (checkEqual@r. r!S. r!s1. r!s2.|p!{x=['Rad s1 S]}T.)
    ; ['Sg S \ x. T] -> s1 ~ s2 | case s1
      { 'Fst -> p!S.
      ; 'Snd -> p!{x=['App f1 'Fst]}T.
      ; _ -> #"Expected Fst or Snd; got %i" s1
      }
    ; ['List S] -> case [s1 | s2]
      { [['ListRec (\xs. T1) n1 (\y.\ys.\ih. c1)] | ['ListRec (\xs. T2) n2 (\y.\ys.\ih. c2)]] -> 
           ( \xs. equalSynthWorker{ xs -> ty}. checkEqual@u. u!'Ty. u!T1. u!T2.
	   | checkEqual@v. v!{xs = ['Rad 'Null ty]}T1. v!n1 . v!n2.
	   | \y. equalSynthWorker {y -> S}. \ys. equalSynthWorker{ys -> ty}. \ih. equalSynthWorker{ih -> {xs = ys}T1}.
	     checkEqual@u. u!{xs = ['Rad ['Plus ['Sing ['Emb y 'Id]] ['Emb ys 'Id]] ty]}T1. u!c1. u!c2. 
	   | p!{xs = f1}T1.)
      ; _ -> #"Expected ListRec's; got %i and %i" s1 s2 
      }
    }
  ; [x|y] -> # "%i not equalSynth to %i" x y
  }

adaptEqual@p = p?sty. p?tty. p?a1. p?a2. case [sty|tty]
  { [['List S] | ['List T]] -> !. \ x. equalSynthWorker {x -> S}.
      	      	   	      	    adaptVal@q1. q1!['Sing ['Emb x 'Id]].
				    adaptVal@q2. q2!['Sing ['Emb x 'Id]].
				    q1!sty . q2!sty. q1!a1 . q2!a2. q1!tty . q2!tty.
				    q1?tm1 . q2?tm2.
				    checkEqual@u. u!tty. u!tm1. u!tm2.				    
  ; _ -> {- only trivial adapters exist at non-list types -}
    case a1
    { 'Id ->
    ; ['Then _ _ _] ->
    ; ['List _] -> #"Impossible list adapter %i" a1
    }
  }


{-
exec checkEval@p. p!['List 'One]. 'Check?two.
       (p!['Plus two two]. p?s. PRINTF "two plus two: %i" s.
       | two ~ ['Plus ['Sing 'Tt] ['Plus ['Sing 'Tt] 'Null]] )
-}

{-
exec checkEqual@p. p!['List 'One]. 'Check?two. 'Check?four.
       ( two ~ ['Plus ['Sing 'Tt] ['Plus ['Sing 'Tt] 'Null]]
       | four ~ ['Plus ['Sing 'Tt] ['Plus ['Sing 'Tt] ['Plus ['Sing 'Tt] ['Sing 'Tt]]]]
       | p!['Plus two two]. p!four. PRINTF "two plus two is four.".)
-}

{-
exec checkEqual@p. p!['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \xs.['List ['Emb X 'Id]]]].
       p!['Lam \X.['Lam \xs.['Plus ['Plus ['Emb xs 'Id]['Plus ['Emb xs 'Id] 'Null]]['Plus ['Emb xs 'Id]['Plus 'Null ['Emb xs 'Id]]]]]].
       p!['Lam \X.['Lam \xs.['Plus ['Emb xs 'Id] ['Plus ['Emb xs 'Id] ['Plus ['Emb xs 'Id] ['Emb xs 'Id]]]]]].
-}

{-
exec checkEval@p. p!['List ['List 'One]]. 'Check?one . 'Check?two.
       ( one ~ ['Sing 'Tt]
       | two ~ ['Plus one one]
       | p!['Emb ['Rad ['Plus ['Sing 'Null] ['Plus ['Sing one] ['Sing two]]] ['List ['List 'One]]] ['List ['Lam \n . ['Plus ['Sing 'Tt] ['Emb n 'Id]] ]]].
         p?x . PRINTF "%i" x.)
-}

{-
exec checkEqual@p. p!['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \xs.['List ['Emb X 'Id]]]].
     		   p!['Lam \X.['Lam \xs. ['Emb xs 'Id]]].
		   p!['Lam \X.['Lam \xs. ['Emb xs ['List ['Lam \x. ['Emb x 'Id]]]]]].
-}

{-
exec check@p. p!['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \xs.['List ['Emb X 'Id]]]].
              p!['Lam \X.['Lam \xs.
	          ['Emb ['App xs
		     ['ListRec \_.['List ['Emb X 'Id]] 'Null \x.\_.\ih.['Plus ['Emb ih 'Id] ['Sing ['Emb x 'Id]]]]] 'Id] ]].
-}

{-
exec checkEval@p. p!['List ['List 'One]]. 'Check?one . 'Check?two. 'Synth?rev.
       ( one ~ ['Sing 'Tt]
       | two ~ ['Plus one one]
       | rev ~ ['Rad ['Lam \X.['Lam \xs.
	                 ['Emb ['App xs['ListRec \_.['List ['Emb X 'Id]] 'Null \x.\_.\ih.['Plus ['Emb ih 'Id] ['Sing ['Emb x 'Id]]]]] 'Id] ]]
	             ['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \xs.['List ['Emb X 'Id]]]]]
       | p!['Emb ['App ['App rev ['List 'One]] ['Plus ['Sing 'Null] ['Plus ['Sing one] ['Sing two]]]] 'Id].
         p?x . PRINTF "%i" x.)
-}

{-
exec equalSynth@p. 'Synth?rev.
       ( rev ~ ['Rad ['Lam \X.['Lam \xs.
	                 ['Emb ['App xs['ListRec \_.['List ['Emb X 'Id]] 'Null \x.\_.\ih.['Plus ['Emb ih 'Id] ['Sing ['Emb x 'Id]]]]] 'Id] ]]
	             ['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \xs.['List ['Emb X 'Id]]]]]
       | p!rev. p!rev.
         p?x . PRINTF "%i" x.)
-}

{-
exec checkEqual@p. p!['List ['List 'One]]. 'Check?one . 'Check?two. 'Synth?rev.
       ( one ~ ['Sing 'Tt]
       | two ~ ['Plus one one]
       | rev ~ ['Rad ['Lam \X.['Lam \xs.
	                 ['Emb ['App xs['ListRec \_.['List ['Emb X 'Id]] 'Null \x.\_.\ih.['Plus ['Emb ih 'Id] ['Sing ['Emb x 'Id]]]]] 'Id] ]]
	             ['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \xs.['List ['Emb X 'Id]]]]]
       | p!['Emb ['App ['App rev ['List 'One]] ['Plus ['Sing 'Null] ['Plus ['Sing one] ['Sing two]]]] 'Id].
         p!['Plus ['Sing two] ['Plus ['Sing one] ['Sing 'Null]]].)
-}

exec \ ys. synthWorker {ys -> ['List ['List 'One]]}. equalSynthWorker {ys -> ['List ['List 'One]]}.
     evalSynth@p. 'Check?one . 'Check?two. 'Synth?foo.  'Synth?rev.
       ( one ~ ['Sing 'Tt]
       | two ~ ['Plus one one]
       | foo ~ ['Rad ['Lam \X.['Lam \xs.
	                 ['Emb ['App xs['ListRec \_.['List ['List ['Emb X 'Id]]] 'Null \_.\tl.\ih.['Plus ['Emb ih 'Id] ['Sing ['Emb tl 'Id]]]]] 'Id] ]]
	             ['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \_.['List ['List ['Emb X 'Id]]]]]]
       | rev ~ ['Rad ['Lam \X.['Lam \xs.
	                 ['Emb ['App xs['ListRec \_.['List ['Emb X 'Id]] 'Null \x.\_.\ih.['Plus ['Emb ih 'Id] ['Sing ['Emb x 'Id]]]]] 'Id] ]]
	             ['Pi 'Ty \X.['Pi ['List ['Emb X 'Id]] \xs.['List ['Emb X 'Id]]]]]
       |
         p!['App ['App foo ['List 'One]] ['Emb ['Rad ['Plus ['Plus ['Emb ys 'Id] ['Sing 'Null]] ['Plus ['Sing one] ['Sing two]]] ['List ['List 'One]]] ['List (['Lam \ x . ['Plus ['Sing 'Tt] ['Emb x 'Id]]])]]].
         p?v. PRINTF "Answer: %i" v.
       )
