-- trace { exec, send, recv, move, unify }

------------------------------------------------------------------------------
-- Interface

syntax
  { 'Type = ['EnumOrTag  ['Nat]
                         [['Arr  'Type 'Type]]
            ]
  }

type : ?'Type.

syntax
  { 'Check = ['EnumOrTag [] [ ['Lam ['Bind 'Synth 'Check]]
                              ['Emb 'Synth]
             ]]
  ; 'Synth = ['EnumOrTag [] [ ['Rad 'Check 'Type]
                              ['App 'Synth 'Check]
             ]]
  }

check : ?'Type. ?'Check.
synth : 'Synth -> 'Type -- synth's stash associates Types to Synth variables
      |- ?'Synth. !'Type.

------------------------------------------------------------------------------
-- Implementation

type@p = p?ty. case ty
  { 'Nat ->
  ; ['Arr S T] ->
      ( type@q. q!S.
      | type@r. r!T.
      )
  }

check@p = p?ty. p?tm. case tm
  { ['Lam \x. body] -> 'Type?S. 'Type?T.
      ( ty ~ ['Arr S T]
      | \x. synth { x -> S }. check@q. q!T. q!body.
      )
  ; ['Emb e] -> synth@q. q!e. q?S. S ~ ty
  }

synth@p = p?tm . lookup tm { S -> p!S. } else case tm
   { ['Rad t ty] ->
        ( type@q. q!ty.
        | check@r. r!ty. r!t.
        | p!ty.
        )
   ; ['App f s] -> 'Type?U. 'Type?V.
        ( synth@q. q!f. q?ty. ty ~ ['Arr U V]
        | check@r. r!U. r!s.
        | p!V.
        )
   }

------------------------------------------------------------------------------
-- Examples
{-
exec  check@p. p! ['Arr 'Nat ['Arr 'Nat 'Nat]].
              p! ['Lam \z. ['Lam \y. ['Emb z]]].
-}
{-
exec  check@p. p! ['Arr 'Nat 'Nat].
              p! ['Lam \z. ['Emb z]].

-}


exec  check@p.
   p! ['Arr 'Nat 'Nat].
   p! ['Lam \z. ['Emb
         ['App ['Rad ['Lam \w. ['Emb w]] ['Arr 'Nat 'Nat]]
         ['Emb z]]]].
   PRINTF "Victory!".
