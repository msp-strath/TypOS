syntax
  { 'Check = ['Tag '[ ['Lam | '[['Bind 'Synth ['Rec 'Check]]]]
                      ['Emb | '[ ['Rec 'Synth]]]]]
  ; 'Synth = ['Tag '[ ['Rad | '[ ['Rec 'Check] ['Rec 'Type]]]
                      ['App | '[ ['Rec 'Synth] ['Rec 'Check]]]]]
  ; 'Type = ['Tag '[ ['Base | '[]]
                     ['Nat  | '[]]
                     ['Bool | '[]]
                     ['Arr  | '[ ['Rec 'Type] ['Rec 'Type]]]]]
  }

check : ?'Type. ?'Check.
synth : ?'Synth. !'Type.

check@p = p?ty. p?tm. case tm
    { ['Lam \x. body] -> ?S. ?T.
         (ty ~ ['Arr S T]
         | \y. synth/subject { y -> p!S. }. check@q. q!T. q!{x=y}body.)
    ; ['Emb e] -> synth@q. q!e. q?S. S ~ ty
    }

synth@p = p?tm. case/subject tm
   { ['Rad t ty] -> (check@q. q!ty. q!t. | p!ty.)
   ; ['App f s] -> ?S. ?T.
        ( synth@q. q!f. q?ty. ty ~ ['Arr S T]
        | check@r. r!S. r!s.
        | p!T.)
   }

exec check@p. p! ['Arr ['Nat] ['Nat]].
     BREAK "Type transmitted".
     p! ['Lam \z. ['App ['Rad ['Lam \w. ['Emb w]] ['Arr ['Nat] ['Nat]]] ['Emb z]]].

exec check@p. p! ['Arr ['Nat] ['Arr ['Bool] ['Nat]]].
     p! ['Lam \z. ['Lam \w. ['Emb z]]].
     BREAK "Example one".
